---
import Layout from '../../components/Layout.astro';
import ProjectCard from '../../components/ProjectCard.astro';
import PageHeader from '../../components/PageHeader.astro';
import { getCollection } from 'astro:content';

const allProjects = await getCollection('projects');
const sortedProjects = allProjects.sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

// Group projects by tag for filtering
const tagGroups = {
  ai: allProjects.filter(p => p.data.tags.includes('ai')),
  gaming: allProjects.filter(p => p.data.tags.includes('gaming')),
  research: allProjects.filter(p => p.data.tags.includes('research')),
  'coding-misc': allProjects.filter(p => p.data.tags.includes('coding-misc')),
  'web-dev': allProjects.filter(p => p.data.tags.includes('web-dev'))
};
---

<Layout title="All Projects - Portfolio" description="Complete collection of all portfolio projects">
  <PageHeader 
    title="📁 All Projects"
    description="Complete collection of all projects across AI, gaming, research, and development."
    stats={[{ label: 'total projects', value: allProjects.length }]}
    variant="gradient"
  />

  <!-- Filter Options -->
  <div class="filter-section">
    <h3>Filter by Category:</h3>
    <div class="filter-buttons">
      <button class="filter-btn active" data-filter="all">All ({allProjects.length})</button>
      <button class="filter-btn" data-filter="ai">AI ({tagGroups.ai.length})</button>
      <button class="filter-btn" data-filter="gaming">Gaming ({tagGroups.gaming.length})</button>
      <button class="filter-btn" data-filter="research">Research ({tagGroups.research.length})</button>
      <button class="filter-btn" data-filter="coding-misc">Coding Misc ({tagGroups['coding-misc'].length})</button>
      <button class="filter-btn" data-filter="web-dev">Web Dev ({tagGroups['web-dev'].length})</button>
    </div>
  </div>

  <div class="projects-grid" id="projects-container">
    {sortedProjects.map((project) => (
      <div class="project-item" data-tags={project.data.tags.join(',')}>
        <ProjectCard
          title={project.data.title}
          description={project.data.description}
          tags={project.data.tags}
          date={project.data.date}
          status={project.data.status}
          liveUrl={project.data.liveUrl}
          downloadUrl={project.data.downloadUrl}
          githubUrl={project.data.githubUrl}
          images={project.data.images}
          technologies={project.data.technologies}
          embedType={project.data.embedType}
          slug={project.slug}
          featured={project.data.featured}
        />
      </div>
    ))}
  </div>
</Layout>

<style>
  .filter-section {
    margin-bottom: 2rem;
    text-align: center;
  }
  
  .filter-section h3 {
    margin-bottom: 1rem;
    color: var(--text);
    font-weight: 600;
  }
  
  .filter-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    justify-content: center;
  }
  
  .filter-btn {
    background: var(--card-bg);
    border: 1px solid var(--border);
    color: var(--text);
    padding: 0.5rem 1rem;
    border-radius: 25px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.9rem;
    font-weight: 600;
  }
  
  .filter-btn:hover {
    background: var(--card-hover);
    border-color: var(--primary);
    color: var(--primary);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(175, 203, 207, 0.2);
  }
  
  .filter-btn.active {
    background: var(--primary);
    color: var(--background);
    border-color: var(--primary);
    box-shadow: 0 4px 12px rgba(175, 203, 207, 0.3);
  }
  
  .projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
  }
  
  .project-item {
    transition: opacity 0.3s, transform 0.3s;
  }
  
  .project-item.hidden {
    display: none;
  }
  
  @media (max-width: 768px) {
    .projects-grid {
      grid-template-columns: 1fr;
    }
    
    .filter-buttons {
      flex-direction: column;
      align-items: center;
    }
  }
</style>

<script>
  // Client-side filtering functionality
  const filterButtons = document.querySelectorAll('.filter-btn');
  const projectItems = document.querySelectorAll('.project-item');
  
  filterButtons.forEach(button => {
    button.addEventListener('click', () => {
      const filter = (button as HTMLElement).dataset.filter || 'all';
      
      // Update active button
      filterButtons.forEach(btn => btn.classList.remove('active'));
      button.classList.add('active');
      
      // Filter projects
      projectItems.forEach(item => {
        const itemTags = (item as HTMLElement).dataset.tags || '';
        const tags = itemTags.split(',');
        
        if (filter === 'all' || tags.includes(filter)) {
          item.classList.remove('hidden');
        } else {
          item.classList.add('hidden');
        }
      });
    });
  });
</script>